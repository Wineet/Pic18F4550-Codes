
// CONFIG1L
#pragma config PLLDIV = 1       // PLL Prescaler Selection bits (No prescale (4 MHz oscillator input drives PLL directly))
#pragma config CPUDIV = OSC1_PLL2// System Clock Postscaler Selection bits ([Primary Oscillator Src: /1][96 MHz PLL Src: /2])
#pragma config USBDIV = 1       // USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1) (USB clock source comes directly from the primary oscillator block with no postscale)

// CONFIG1H
#pragma config FOSC = INTOSC_EC // Oscillator Selection bits (Internal oscillator, CLKO function on RA6, EC used by USB (INTCKO))
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enable bit (Fail-Safe Clock Monitor disabled)
#pragma config IESO = OFF       // Internal/External Oscillator Switchover bit (Oscillator Switchover mode disabled)

// CONFIG2L
#pragma config PWRT = OFF       // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOR = OFF        // Brown-out Reset Enable bits (Brown-out Reset disabled in hardware and software)
#pragma config BORV = 3         // Brown-out Reset Voltage bits (Minimum setting 2.05V)
#pragma config VREGEN = OFF     // USB Voltage Regulator Enable bit (USB voltage regulator disabled)

// CONFIG2H
#pragma config WDT = OFF        // Watchdog Timer Enable bit (WDT disabled (control is placed on the SWDTEN bit))
#pragma config WDTPS = 32768    // Watchdog Timer Postscale Select bits (1:32768)

// CONFIG3H
#pragma config CCP2MX = OFF     // CCP2 MUX bit (CCP2 input/output is multiplexed with RC1)
#pragma config PBADEN = OFF    // PORTB A/D Enable bit (PORTB<4:0> pins are configured as digital I/O on Reset)
#pragma config LPT1OSC = OFF    // Low-Power Timer 1 Oscillator Enable bit (Timer1 configured for higher power operation)
#pragma config MCLRE = ON       // MCLR Pin Enable bit (MCLR pin enabled; RE3 input pin disabled)

// CONFIG4L
#pragma config STVREN = OFF    // Stack Full/Underflow Reset Enable bit (Stack full/underflow will cause Reset)
#pragma config LVP = OFF        // Single-Supply ICSP Enable bit (Single-Supply ICSP disabled)
#pragma config ICPRT = OFF      // Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit (ICPORT disabled)
#pragma config XINST = OFF      // Extended Instruction Set Enable bit (Instruction set extension and Indexed Addressing mode disabled (Legacy mode))

// CONFIG5L
#pragma config CP0 = OFF        // Code Protection bit (Block 0 (000800-001FFFh) is not code-protected)
#pragma config CP1 = OFF        // Code Protection bit (Block 1 (002000-003FFFh) is not code-protected)
#pragma config CP2 = OFF        // Code Protection bit (Block 2 (004000-005FFFh) is not code-protected)
#pragma config CP3 = OFF        // Code Protection bit (Block 3 (006000-007FFFh) is not code-protected)

// CONFIG5H
#pragma config CPB = OFF        // Boot Block Code Protection bit (Boot block (000000-0007FFh) is not code-protected)
#pragma config CPD = OFF        // Data EEPROM Code Protection bit (Data EEPROM is not code-protected)

// CONFIG6L
#pragma config WRT0 = OFF       // Write Protection bit (Block 0 (000800-001FFFh) is not write-protected)
#pragma config WRT1 = OFF       // Write Protection bit (Block 1 (002000-003FFFh) is not write-protected)
#pragma config WRT2 = OFF       // Write Protection bit (Block 2 (004000-005FFFh) is not write-protected)
#pragma config WRT3 = OFF       // Write Protection bit (Block 3 (006000-007FFFh) is not write-protected)

// CONFIG6H
#pragma config WRTC = OFF       // Configuration Register Write Protection bit (Configuration registers (300000-3000FFh) are not write-protected)
#pragma config WRTB = OFF       // Boot Block Write Protection bit (Boot block (000000-0007FFh) is not write-protected)
#pragma config WRTD = OFF       // Data EEPROM Write Protection bit (Data EEPROM is not write-protected)

// CONFIG7L
#pragma config EBTR0 = OFF      // Table Read Protection bit (Block 0 (000800-001FFFh) is not protected from table reads executed in other blocks)
#pragma config EBTR1 = OFF      // Table Read Protection bit (Block 1 (002000-003FFFh) is not protected from table reads executed in other blocks)
#pragma config EBTR2 = OFF      // Table Read Protection bit (Block 2 (004000-005FFFh) is not protected from table reads executed in other blocks)
#pragma config EBTR3 = OFF      // Table Read Protection bit (Block 3 (006000-007FFFh) is not protected from table reads executed in other blocks)

// CONFIG7H
#pragma config EBTRB = OFF      // Boot Block Table Read Protection bit (Boot block (000000-0007FFh) is not protected from table reads executed in other blocks)

#define _XTAL_FREQ 8000000
#include<XC.h>
#include <p18f4550.h>

#define rs LATDbits.LATD5
#define rw LATDbits.LATD6
#define en LATDbits.LATD7
#define port LATB

void delay(int delay)
{
    for (int i = 0; i < delay; i++) {
        __delay_ms(1);

    }

}
void lcd_printc(unsigned char c)
{
    /*Define rs rw en port*/
    rs=1;
    port=c;
    en=1;
    en=1;
    en=0;
    __delay_ms(10);
}
void lcd_cmd(unsigned char c)
{
      /*Define rs rw en port*/
    rs=0;
    port=c;
    en=1;
    en=1;
    en=0;
    __delay_ms(10);
}
void lcd_init()
{
      /*Define rs rw en port*/
    /*OSCCON=0X72; Define in main for 8MHZ freq internal*/
    TRISB=0;    //PortB as output port
    TRISDbits.TRISD5=0; // RS RW EN pin output Define
    TRISDbits.TRISD6=0;
    TRISDbits.TRISD7=0;
    
    lcd_cmd(0x38);
    lcd_cmd(0x01);
    lcd_cmd(0x06);
    lcd_cmd(0x0c);
    lcd_cmd(0x0e);
    lcd_cmd(0x80);
     rw=0;

}
void lcd_prints( char *ptr)
{
    while(*ptr!=\0)
    {
    lcd_printc(*ptr++);
    }
}
int data=0;
 void interrupt ISR(void)
{
    
    if(RCIF==1)                     //Polling for reception interrupt
    { 
       while(PIR1bits.RCIF==0);
        data=RCREG;
      RCIF=0;
                         //Transmitting back received data
    }      
}
 
unsigned int usart_rec()
{
      int data=0;
      SPBRG=12;
      BAUDCON=0X00;
      TXSTAbits.SYNC=0;
      RCSTAbits.SPEN=1;
      TXSTAbits.BRGH=0;   // low speed
      RCSTAbits.CREN=1;   //continues recieve mode
      while(PIR1bits.RCIF==0);
      data=RCREG;
      return(data);

}
void usart_send(unsigned char x)
{
       SPBRG=12;
         BAUDCON=0X00;
         TXSTAbits.SYNC=0;
         RCSTAbits.SPEN=1;
        TXSTAbits.BRGH=0;   // low speed
        TXSTAbits.TXEN=1;
        TXREG=x;
        while(PIR1bits.TXIF==0);


 
}
void usart_send_str(unsigned char *a)
{
    while(*a)
    {
        usart_send(*a++);
    }

}

void main()
{
    OSCCON=0x73; 
    INTCONbits.GIE=1;   //Global interrupt enable bit
    INTCONbits.PEIE=1;
    PIE1bits.RCIE=1; //Receive interrupt enable bit
    TRISDbits.TRISD0=0;
   
    lcd_init();
    lcd_prints("HELLO");
    usart_send_str("Hello");  
    usart_send('\r');
    usart_send_str("Hello");  
       
        SPBRG=12;
         BAUDCON=0X00;
         TXSTAbits.SYNC=0;
         RCSTAbits.SPEN=1;
        TXSTAbits.BRGH=0;   // low speed
        RCSTAbits.CREN=1;   //continues recieve mode
       
                    while(1)
                {


                        if(data!=0)
                        {
                    lcd_printc(data);
                    data=0;
                    }
    }
}
