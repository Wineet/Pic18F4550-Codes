
// CONFIG1L
#pragma config PLLDIV = 1       // PLL Prescaler Selection bits (No prescale (4 MHz oscillator input drives PLL directly))
#pragma config CPUDIV = OSC1_PLL2// System Clock Postscaler Selection bits ([Primary Oscillator Src: /1][96 MHz PLL Src: /2])
#pragma config USBDIV = 1       // USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1) (USB clock source comes directly from the primary oscillator block with no postscale)

// CONFIG1H
#pragma config FOSC = INTOSC_EC // Oscillator Selection bits (Internal oscillator, CLKO function on RA6, EC used by USB (INTCKO))
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enable bit (Fail-Safe Clock Monitor disabled)
#pragma config IESO = OFF       // Internal/External Oscillator Switchover bit (Oscillator Switchover mode disabled)

// CONFIG2L
#pragma config PWRT = OFF       // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOR = OFF        // Brown-out Reset Enable bits (Brown-out Reset disabled in hardware and software)
#pragma config BORV = 3         // Brown-out Reset Voltage bits (Minimum setting 2.05V)
#pragma config VREGEN = OFF     // USB Voltage Regulator Enable bit (USB voltage regulator disabled)

// CONFIG2H
#pragma config WDT = OFF        // Watchdog Timer Enable bit (WDT disabled (control is placed on the SWDTEN bit))
#pragma config WDTPS = 32768    // Watchdog Timer Postscale Select bits (1:32768)

// CONFIG3H
#pragma config CCP2MX = OFF     // CCP2 MUX bit (CCP2 input/output is multiplexed with RC1)
#pragma config PBADEN = OFF    // PORTB A/D Enable bit (PORTB<4:0> pins are configured as digital I/O on Reset)
#pragma config LPT1OSC = OFF    // Low-Power Timer 1 Oscillator Enable bit (Timer1 configured for higher power operation)
#pragma config MCLRE = ON       // MCLR Pin Enable bit (MCLR pin enabled; RE3 input pin disabled)

// CONFIG4L
#pragma config STVREN = OFF    // Stack Full/Underflow Reset Enable bit (Stack full/underflow will cause Reset)
#pragma config LVP = OFF        // Single-Supply ICSP Enable bit (Single-Supply ICSP disabled)
#pragma config ICPRT = OFF      // Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit (ICPORT disabled)
#pragma config XINST = OFF      // Extended Instruction Set Enable bit (Instruction set extension and Indexed Addressing mode disabled (Legacy mode))

// CONFIG5L
#pragma config CP0 = OFF        // Code Protection bit (Block 0 (000800-001FFFh) is not code-protected)
#pragma config CP1 = OFF        // Code Protection bit (Block 1 (002000-003FFFh) is not code-protected)
#pragma config CP2 = OFF        // Code Protection bit (Block 2 (004000-005FFFh) is not code-protected)
#pragma config CP3 = OFF        // Code Protection bit (Block 3 (006000-007FFFh) is not code-protected)

// CONFIG5H
#pragma config CPB = OFF        // Boot Block Code Protection bit (Boot block (000000-0007FFh) is not code-protected)
#pragma config CPD = OFF        // Data EEPROM Code Protection bit (Data EEPROM is not code-protected)

// CONFIG6L
#pragma config WRT0 = OFF       // Write Protection bit (Block 0 (000800-001FFFh) is not write-protected)
#pragma config WRT1 = OFF       // Write Protection bit (Block 1 (002000-003FFFh) is not write-protected)
#pragma config WRT2 = OFF       // Write Protection bit (Block 2 (004000-005FFFh) is not write-protected)
#pragma config WRT3 = OFF       // Write Protection bit (Block 3 (006000-007FFFh) is not write-protected)

// CONFIG6H
#pragma config WRTC = OFF       // Configuration Register Write Protection bit (Configuration registers (300000-3000FFh) are not write-protected)
#pragma config WRTB = OFF       // Boot Block Write Protection bit (Boot block (000000-0007FFh) is not write-protected)
#pragma config WRTD = OFF       // Data EEPROM Write Protection bit (Data EEPROM is not write-protected)

// CONFIG7L
#pragma config EBTR0 = OFF      // Table Read Protection bit (Block 0 (000800-001FFFh) is not protected from table reads executed in other blocks)
#pragma config EBTR1 = OFF      // Table Read Protection bit (Block 1 (002000-003FFFh) is not protected from table reads executed in other blocks)
#pragma config EBTR2 = OFF      // Table Read Protection bit (Block 2 (004000-005FFFh) is not protected from table reads executed in other blocks)
#pragma config EBTR3 = OFF      // Table Read Protection bit (Block 3 (006000-007FFFh) is not protected from table reads executed in other blocks)

// CONFIG7H
#pragma config EBTRB = OFF      // Boot Block Table Read Protection bit (Boot block (000000-0007FFh) is not protected from table reads executed in other blocks)

#define _XTAL_FREQ 8000000
#include<XC.h>
#include<p18f4550.h>
#define rs LATDbits.LATD5
#define rw LATDbits.LATD6
#define en LATDbits.LATD7
#define port LATB

void delay(int delay)
{
    for (int i = 0; i < delay; i++) {
        __delay_ms(1);

    }

}
void lcd_printc(unsigned char c)
{
    /*Define rs rw en port*/
rw=0;
    rs=1;
    port =(port&0x0F)|(c&0xF0);
    en=1;
    en=1;
    en=0;
    __delay_ms(10);
    rs=1;
    port =(port&0x0F)|((c<<4)&0xF0);
    en=1;
    en=1;
    en=0;
    __delay_ms(10);
}
void lcd_cmd(unsigned char c)
{
      /*Define rs rw en port*/
    rw=0;
    rs=0;
    port =(port&0x0F)|(c&0xF0);
    en=1;
    en=1;
    en=0;
    __delay_ms(10);
     rs=0;
    port =(port&0x0F)|((c<<4)&0xF0);
    en=1;
    en=1;
    en=0;
    __delay_ms(10);
}
void lcd_init()
{
      rw=0;
      /*Define rs rw en port*/
    /*OSCCON=0X72; Define in main for 8MHZ freq internal*/
      TRISBbits.TRISB4=0;
      TRISBbits.TRISB5=0;  
      TRISBbits.TRISB6=0;
      TRISBbits.TRISB7=0;
      
      LATBbits.LATB4=0;
      LATBbits.LATB5=0;
      LATBbits.LATB6=0;
      LATBbits.LATB7=0;
    
    TRISDbits.TRISD5=0; // RS RW EN pin output Define
    TRISDbits.TRISD6=0;
    TRISDbits.TRISD7=0;
     lcd_cmd(0x02);
          lcd_cmd(0x28);
           lcd_cmd(0x0E);
    
    lcd_cmd(0x80);
   

}
void lcd_prints( char *ptr)
{
    while(*ptr!=\0)
    {
    lcd_printc(*ptr++);
    }
}

void I2c_int()
{
     TRISBbits.TRISB0=1; //SDA
     TRISBbits.TRISB1=1; //CLK
      SSPCON1 = 0x28; 
        //    SSPADD=127;   //15Khz freq
         // SSPCON1bits.WCOL=0;
          //SSPCON1bits.SSPEN=1;
          //SSPCON1bits.SSPM=0b1000;
           SSPADD =127;     //Setting SCL frequency with value in clock_freq
          SSPSTAT = 0x00;  
          PIR1bits.SSPIF=0;//Transmit Interrupt Flag
           __delay_ms(10);
                                
   
}
void I2c_wait()
{
    while(!PIR1bits.SSPIF);                              //wait till SSPIF flag is set
    PIR1bits.SSPIF=0;

}
void I2c_start()
{
     SSPCON1bits.SSPEN=1;
 SSPCON2bits.SEN=1;    // Start condition Enable
 I2c_wait();
  __delay_ms(10);
}

void I2c_write(unsigned char data)
{
  jump:  SSPBUF=data;
    I2c_wait();
    while( SSPCON2bits.ACKSTAT ) // In master transmit mode Acknowledge recieved=0 from slave
    {
        I2c_start();
        goto jump;
    }
 __delay_ms(10);
}

void I2c_stop()
{
  
  SSPCON2bits.PEN=1; //stop condition bit
  I2c_wait();
     SSPCON1bits.SSPEN=0;
      __delay_ms(10);
}
void I2c_Ack()
{
   SSPCON2bits.ACKDT=0;                                    //Set as acknowledgement
    SSPCON2bits.ACKEN=1;                                    //Initiate acknowledgement signal
    I2c_wait();                                //Wait till completion of event
}
int I2c_read()
{
    int dat=0;
SSPCON2bits.RCEN=1;// master Recieve mode oN
while(!SSPSTATbits.BF);
SSPSTATbits.BF=0;
SSPCON2bits.RCEN=0;// master Recieve mode off
//I2c_Ack();        //Don't Give ack signal while in Receiving  Mode 
 dat=SSPBUF;
 __delay_ms(10);
return dat;
 
}

void I2c_restart(void)
{
    SSPCON2bits.RSEN=1;                                     //Initiate restart condition
    I2c_wait();   //Wait till completion of event
     __delay_ms(10);
}



void I2c_nack(void)
{
   SSPCON2bits.ACKDT=1;                                    //Set as negative acknowledgement
    SSPCON2bits.ACKEN=1;                                    //Initiate negative acknowledgement signal
    I2c_wait();                                //Wait till completion of event
}

void lcd_no_print(unsigned int z)
{
    int a;
   
    a=z;
    a=a/10;
    lcd_printc(a+48);
    
    a=z;
    a=a%10;
    lcd_printc(a+48);

}

/* Convert BCD to decimal */
int BCDtoDecimal (int val)
{
    int res;
    res = (val & 0x0F) + ((val & 0xF0)>>4)*10;
    return res;
}


void main()
{
    OSCCON=0x73; 
  lcd_init();
       
         I2c_int();
         I2c_start();   // Start Condition
         I2c_write(0xD0); //Slave address
         I2c_write(0x00);  // set register Pointer
          I2c_write(0x00);  // data at 00 Reg value     SECONDS
           I2c_write(0x00);  // data at 00 Reg value    Minutes
          I2c_stop();  // Stop Condition
         delay(1000);
  
         lcd_prints("Done");
    
         int time;
    
         /* RTC NOTES ds1307  (Using RTC as counter)
          * Don't Give ack signal while in Receiving  Mode
            * use Restart Condition don't use stop and start manually
            * and use delay after  each read and write cycles*/ 
         
    while(1)
    {
      I2c_int();
      I2c_start();        // Start Condition  
      I2c_write(0xD0);    //Slave address
      I2c_write(0x00);       // set register Pointer 
                                        //I2c_stop();         // Don't use Restart
                                       // I2c_start();
      I2c_restart();
      I2c_write(0xD1);       //reading Mode
      time=I2c_read();       // Read pointer reg value 
      I2c_stop(); 
           
      time=BCDtoDecimal(time); 
      
      
        lcd_cmd(0xC0);
        lcd_no_print(time);
      
        

    }
}