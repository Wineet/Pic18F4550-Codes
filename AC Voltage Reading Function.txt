// PIC18F4550 Configuration Bit Settings

// 'C' source line config statements


// CONFIG1L
#pragma config PLLDIV = 1       // PLL Prescaler Selection bits (No prescale (4 MHz oscillator input drives PLL directly))
#pragma config CPUDIV = OSC1_PLL2// System Clock Postscaler Selection bits ([Primary Oscillator Src: /1][96 MHz PLL Src: /2])
#pragma config USBDIV = 1       // USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1) (USB clock source comes directly from the primary oscillator block with no postscale)

// CONFIG1H
#pragma config FOSC = INTOSC_EC // Oscillator Selection bits (Internal oscillator, CLKO function on RA6, EC used by USB (INTCKO))
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enable bit (Fail-Safe Clock Monitor disabled)
#pragma config IESO = OFF       // Internal/External Oscillator Switchover bit (Oscillator Switchover mode disabled)

// CONFIG2L
#pragma config PWRT = OFF       // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOR = OFF        // Brown-out Reset Enable bits (Brown-out Reset disabled in hardware and software)
#pragma config BORV = 3         // Brown-out Reset Voltage bits (Minimum setting 2.05V)
#pragma config VREGEN = OFF     // USB Voltage Regulator Enable bit (USB voltage regulator disabled)

// CONFIG2H
#pragma config WDT = OFF        // Watchdog Timer Enable bit (WDT disabled (control is placed on the SWDTEN bit))
#pragma config WDTPS = 32768    // Watchdog Timer Postscale Select bits (1:32768)

// CONFIG3H
#pragma config CCP2MX = ON      // CCP2 MUX bit (CCP2 input/output is multiplexed with RC1)
#pragma config PBADEN = ON    // PORTB A/D Enable bit (PORTB<4:0> pins are configured as digital I/O on Reset)
#pragma config LPT1OSC = OFF    // Low-Power Timer 1 Oscillator Enable bit (Timer1 configured for higher power operation)
#pragma config MCLRE = ON       // MCLR Pin Enable bit (MCLR pin enabled; RE3 input pin disabled)

// CONFIG4L
#pragma config STVREN = ON      // Stack Full/Underflow Reset Enable bit (Stack full/underflow will cause Reset)
#pragma config LVP = OFF        // Single-Supply ICSP Enable bit (Single-Supply ICSP disabled)
#pragma config ICPRT = OFF      // Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit (ICPORT disabled)
#pragma config XINST = OFF      // Extended Instruction Set Enable bit (Instruction set extension and Indexed Addressing mode disabled (Legacy mode))

// CONFIG5L
#pragma config CP0 = OFF        // Code Protection bit (Block 0 (000800-001FFFh) is not code-protected)
#pragma config CP1 = OFF        // Code Protection bit (Block 1 (002000-003FFFh) is not code-protected)
#pragma config CP2 = OFF        // Code Protection bit (Block 2 (004000-005FFFh) is not code-protected)
#pragma config CP3 = OFF        // Code Protection bit (Block 3 (006000-007FFFh) is not code-protected)

// CONFIG5H
#pragma config CPB = OFF        // Boot Block Code Protection bit (Boot block (000000-0007FFh) is not code-protected)
#pragma config CPD = OFF        // Data EEPROM Code Protection bit (Data EEPROM is not code-protected)

// CONFIG6L
#pragma config WRT0 = OFF       // Write Protection bit (Block 0 (000800-001FFFh) is not write-protected)
#pragma config WRT1 = OFF       // Write Protection bit (Block 1 (002000-003FFFh) is not write-protected)
#pragma config WRT2 = OFF       // Write Protection bit (Block 2 (004000-005FFFh) is not write-protected)
#pragma config WRT3 = OFF       // Write Protection bit (Block 3 (006000-007FFFh) is not write-protected)

// CONFIG6H
#pragma config WRTC = OFF       // Configuration Register Write Protection bit (Configuration registers (300000-3000FFh) are not write-protected)
#pragma config WRTB = OFF       // Boot Block Write Protection bit (Boot block (000000-0007FFh) is not write-protected)
#pragma config WRTD = OFF       // Data EEPROM Write Protection bit (Data EEPROM is not write-protected)

// CONFIG7L
#pragma config EBTR0 = OFF      // Table Read Protection bit (Block 0 (000800-001FFFh) is not protected from table reads executed in other blocks)
#pragma config EBTR1 = OFF      // Table Read Protection bit (Block 1 (002000-003FFFh) is not protected from table reads executed in other blocks)
#pragma config EBTR2 = OFF      // Table Read Protection bit (Block 2 (004000-005FFFh) is not protected from table reads executed in other blocks)
#pragma config EBTR3 = OFF      // Table Read Protection bit (Block 3 (006000-007FFFh) is not protected from table reads executed in other blocks)

// CONFIG7H
#pragma config EBTRB = OFF      // Boot Block Table Read Protection bit (Boot block (000000-0007FFh) is not protected from table reads executed in other blocks)


#define _XTAL_FREQ 8000000



#include<P18F4550.h>
#include<stdio.h>
#include <xc.h>
#define rs LATDbits.LATD5
#define rw LATDbits.LATD6
#define en LATDbits.LATD7
#define port LATB
#define relay1 LATDbits.LATD1
#define relay2 LATDbits.LATD0
#define relay3 LATCbits.LATC1
#define relay4 LATCbits.LATC2

void delay(int delay)
{
    for (int i = 0; i < delay; i++) {
        __delay_ms(1);

    }

}
void lcd_printc(unsigned char c)
{
    /*Define rs rw en port*/
    rs=1;
    port=c;
    en=1;
    en=1;
    en=0;
    __delay_ms(10);
}
void lcd_cmd(unsigned char c)
{
        
  
      /*Define rs rw en port*/
    rw=0;
    rs=0;
    port=c;
     delay(1);
    en=1;
    delay(1);
    en=0;
    __delay_ms(10);
}
void lcd_init()
{
      /*Define rs rw en port*/
    /*OSCCON=0X72; Define in main for 8MHZ freq internal*/
    TRISB=0;    //PortB as output port
    TRISDbits.TRISD5=0; // RS RW EN pin output Define
    TRISDbits.TRISD6=0;
    TRISDbits.TRISD7=0;
    rw=0;
  
  
   // lcd_cmd(0x06);
   
    lcd_cmd(0x0E);
     lcd_cmd(0x01);
    lcd_cmd(0x38);
     

}
void lcd_prints( char *ptr)
{
    while(*ptr!=\0)
    {
    lcd_printc(*ptr++);
    }
}

//ADC
int adc_read(unsigned int CHN)
{
    unsigned int adc_val=0;
         ADRESH=0X00;
        ADRESL=0X00;
          
        ADCON1bits.VCFG=0b00;   //referance
         ADCON1bits.PCFG=0b0100; // analog digital I/O upto AN10
        ADCON2bits.ADFM=0;  //left justified
         ADCON2bits.ADCS=0b110; //ADC_CLOCK FOSC/64
         ADCON0bits.ADON=1;  //ADC_MODULE_ON
          
        ADCON0bits.CHS=CHN;   //channel
         ADCON0bits.GO=1;//adc_CONVERSION_START
        while(ADCON0bits.DONE==1);
         ADCON0bits.ADON=0;
         adc_val=(ADRESH<<2)|(ADRESL>>6);
          ADCON0bits.ADON=0;
          return(adc_val);
}

void lcd_no_print(unsigned int z)
{
    int a;
    a=z;
    a=a/100;
    lcd_printc(a+48);
    a=z;
    a=a/10;
    a=a%10;
    lcd_printc(a+48);
    a=z;
  
    a=a%10;
    lcd_printc(a+48);
     

}

void relay_int()
{
    TRISCbits.TRISC1=0;
    TRISCbits.TRISC2=0;
    TRISDbits.TRISD0=0;
    TRISDbits.TRISD1=0;
    LATCbits.LATC1=0;
    LATCbits.LATC2=0;
    LATDbits.LATD0=0;
    LATDbits.LATD1=0;
    

}
int supply_read(int channel)
{
      int y=0;
           float x=0;
  
          y=0; x=0;
             
                                                for(int j=0;j<500;j++)
                                                {
                                                    y=adc_read(channel);
                                                    if(x<y)
                                                    {
                                                        x=y;
                                                    }
                                                }
           x=(x*5)/1024.0;
           x=x*101/1.414;          
          
            return x;
         

}
void main(void) {
         OSCCON=0X72;        //8Mhz crystal
          lcd_init();  
           lcd_prints("initialising"); 
          relay_int();
          delay(2000);
          lcd_cmd(0x80);
           lcd_prints("S1  S2  S3  S4");  
      
          
           
          int x=0;
          while(1)
          { 
         
          
            x= supply_read(0);
            lcd_cmd(0xC0);
            lcd_no_print(x);
            lcd_printc(' ');
            delay(10);
                   
                         
           }
}


/* Voltage divider of 1M ohm to 10K ohm*/